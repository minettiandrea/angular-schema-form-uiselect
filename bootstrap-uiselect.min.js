angular.module("schemaForm").run(["$templateCache",function(e){e.put("directives/decorators/bootstrap/uiselect/multi.html",'<div class="form-group" ng-class="{\'has-error\': hasError(), \'has-success\': hasSuccess(), \'has-feedback\': form.feedback !== false}" ng-init="form.select_models=(form.schema.items| whereMulti : \'value\' : ($$value$$||[]))"><label class="control-label" ng-show="showTitle()">{{form.title}}</label><div class="form-group"><ui-select multiple="" sortable-options="{{form.sortableOptions}}" ng-model="form.select_models" ng-controller="UiSelectController" theme="bootstrap" on-select="$$value$$.push($item.value)" on-remove="$$value$$.splice($$value$$.indexOf($item.value), 1)" class="{{form.options.uiClass}}"><ui-select-match placeholder="{{form.placeholder || form.schema.placeholder || (\'placeholders.select\' | translate)}}">{{$item.label}}</ui-select-match><ui-select-choices repeat="item in form.schema.items | propsFilter: {label: $select.search}" refresh="fetchResult(form.schema, form.options, $select.search)" refresh-delay="form.options.refreshDelay"><div ng-bind-html="item.label | highlight: $select.search"></div></ui-select-choices></ui-select><input toggle-model="" type="hidden" ng-model="insideModel" sf-changed="form" schema-validate="form"> <span ng-if="form.feedback !== false" class="form-control-feedback" ng-class="evalInScope(form.feedback) || {\'glyphicon\': true, \'glyphicon-ok\': hasSuccess(), \'glyphicon-remove\': hasError() }"></span><div class="help-block" ng-show="(hasError() && errorMessage(schemaError())) || form.description" ng-bind-html="(hasError() && errorMessage(schemaError())) || form.description"></div></div></div>'),e.put("directives/decorators/bootstrap/uiselect/single.html",'<div class="form-group" ng-class="{\'has-error\': hasError(), \'has-success\': hasSuccess(), \'has-feedback\': form.feedback !== false}" ng-init="select_models=(form.schema.items | where : {value: $$value$$})"><label class="control-label" ng-show="showTitle()">{{form.title}}</label><div class="form-group" ng-init="select_model.selected=select_models[0]"><ui-select ng-model="select_model.selected" ng-controller="UiSelectController" theme="bootstrap" ng-disabled="form.disabled" on-select="$$value$$=$item.value" class="{{form.options.uiClass}}"><ui-select-match placeholder="{{form.placeholder || form.schema.placeholder || (\'placeholders.select\' | translate)}}">{{select_model.selected.label}}</ui-select-match><ui-select-choices repeat="item in form.schema.items | propsFilter: {label: $select.search}" refresh="fetchResult(form.schema, form.options, $select.search)" refresh-delay="form.options.refreshDelay"><div ng-bind-html="item.label | highlight: $select.search"></div></ui-select-choices></ui-select><input type="hidden" toggle-single-model="" sf-changed="form" ng-model="insideModel" schema-validate="form"> <span ng-if="form.feedback !== false" class="form-control-feedback" ng-class="evalInScope(form.feedback) || {\'glyphicon\': true, \'glyphicon-ok\': hasSuccess(), \'glyphicon-remove\': hasError() }"></span><div class="help-block" ng-show="(hasError() && errorMessage(schemaError())) || form.description" ng-bind-html="(hasError() && errorMessage(schemaError())) || form.description"></div></div></div>')}]),angular.module("schemaForm").config(["schemaFormProvider","schemaFormDecoratorsProvider","sfPathProvider",function(e,t,r){var o=function(t,o,s){if("string"===o.type&&"uiselect"==o.format){var l=e.stdFormObj(t,o,s);return l.key=s.path,l.type="uiselect",s.lookup[r.stringify(s.path)]=l,l}};e.defaults.string.unshift(o);var o=function(t,o,s){if("number"===o.type&&"uiselect"==o.format){var l=e.stdFormObj(t,o,s);return l.key=s.path,l.type="uiselect",s.lookup[r.stringify(s.path)]=l,l}};e.defaults.number.unshift(o);var s=function(t,o,s){if("array"===o.type&&"uiselect"==o.format){var l=e.stdFormObj(t,o,s);return l.key=s.path,l.type="uimultiselect",s.lookup[r.stringify(s.path)]=l,l}};e.defaults.array.unshift(s),t.addMapping("bootstrapDecorator","uiselect","directives/decorators/bootstrap/uiselect/single.html"),t.createDirective("uiselect","directives/decorators/bootstrap/uiselect/single.html"),t.addMapping("bootstrapDecorator","uimultiselect","directives/decorators/bootstrap/uiselect/multi.html"),t.createDirective("uimultiselect","directives/decorators/bootstrap/uiselect/multi.html")}]).directive("toggleSingleModel",function(){return{require:"ngModel",restrict:"A",scope:{},replace:!0,controller:["$scope",function(e){e.$parent.$watch("select_model.selected",function(){void 0!=e.$parent.select_model.selected&&(e.$parent.insideModel=e.$parent.select_model.selected.value,e.$parent.ngModel.$setViewValue(e.$parent.select_model.selected.value))})}]}}).directive("toggleModel",function(){return{require:"ngModel",restrict:"A",scope:{},controller:["$scope","sfSelect",function(e,t){var r=t(e.$parent.form.key,e.$parent.model);angular.isUndefined(r)&&(r=[],t(e.$parent.form.key,e.$parent.model,r)),e.$parent.$watch("form.select_models",function(){0==e.$parent.form.select_models.length?(e.$parent.insideModel=e.$parent.$$value$$,void 0!=e.$parent.ngModel.$viewValue&&e.$parent.ngModel.$setViewValue(e.$parent.form.select_models)):(e.$parent.insideModel=e.$parent.form.select_models,e.$parent.ngModel.$setViewValue(e.$parent.form.select_models))},!0)}]}}).filter("whereMulti",function(){return function(e,t,r){var o=[];return angular.isArray(r)?r.forEach(function(r){for(var s=0;s<e.length;s++)if(r==e[s][t]){o.push(e[s]);break}}):o=e,o}}).filter("propsFilter",function(){return function(e,t){var r=[];return angular.isArray(e)?e.forEach(function(e){for(var o=!1,s=Object.keys(t),l=0;l<s.length;l++){var a=s[l];if(e.hasOwnProperty(a)){var i=t[a].toLowerCase();if(0===e[a].toString().toLowerCase().indexOf(i)||-1!==e[a].toString().toLowerCase().indexOf(" "+i)){o=!0;break}}}o&&r.push(e)}):r=e,r}}),angular.module("lightApp").controller("UiSelectController",["$scope","$http",function(e,t){e.tagFunction=function(e){var t={value:e,label:e,description:"",group:""};return t},e.fetchResult=function(e,r){if(r){if(r.http_post)return t.post(r.http_post.url,r.http_post.parameter).then(function(t){e.items=t.data,console.log("post items",e.items)},function(e,t){alert("Loading select items failed (URL: '"+String(r.http_post.url)+"' Parameter: "+String(r.http_post.parameter)+"\nError: "+t)});if(r.http_get)return t.get(r.http_get.url).then(function(t){e.items=t.data,console.log("get items",e.items)},function(e,t){alert("Loading select items failed (URL: '"+String(r.http_get.url)+"\nError: "+t)})}}}]);